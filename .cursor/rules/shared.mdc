---
description:
globs:
alwaysApply: true
---

# AI Rules for Jido NPC Generator

Jido NPC Generator is an application that facilitates the design and generation of NPC files for Open Tibia servers using the Jido system (TFS â‰¤ 1.5). The goal is to significantly reduce the time required to create NPCs by eliminating the manual writing of XML files and LUA scripts for simple use cases. In the MVP, the AI generates only the XML file based on the provided parameters, and the LUA script is a common default file, default.lua; the application does not provide manual editing of XML or Lua.

## Tech Stack

- Astro 5
- TypeScript 5
- React 19
- Tailwind 4
- Shadcn/ui
- Supabase

## Preferred libraries

- react-hook-form
- zod + zodResolver
- Lucide Icons
- Supabase Client

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `./src` - source code
- `./src/assets` - static internal assets (images, default scripts)
- `./src/components` - Client-side components (Astro for static, React for dynamic)
- `./src/components/features` - Components related to specific application features (e.g., NPC)
- `./src/components/layout` - Components responsible for the global application layout
- `./src/components/pages` - Components used on specific pages
- `./src/components/ui` - Components from Shadcn/ui
- `./src/db` - Supabase clients and generated database types
- `./src/hooks` - Custom React hooks
- `./src/layouts` - Astro layouts
- `./src/lib` - Services, helpers, and validators
- `./src/middleware` - Astro middleware
- `./src/pages` - Astro pages (routes)
- `./src/pages/api` - API endpoints
- `./src/styles` - Global styles
- `./src/types.ts` - Shared types for backend and frontend (Entities, DTOs)
- `./public` - Publicly accessible assets
- `./supabase/migrations` - Supabase database migration scripts

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use an if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
